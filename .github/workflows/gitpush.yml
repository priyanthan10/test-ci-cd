name: Build, Push, and Deploy to ECS

on: 
  push:
    branches:
      - main

jobs:
  create-cluster:
    name: Create ECS Cluster
    runs-on: ubuntu-latest

    steps:
      # Step 1: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      # Step 2: Verify AWS credentials
      - name: Verify AWS credentials
        run: aws sts get-caller-identity --region ap-south-1

      # Step 3: Create ECS Cluster
      - name: Create ECS Cluster
        run: |
          aws ecs create-cluster \
            --cluster-name apache-web-cluster \
            --region ap-south-1

  create-task-definition:
    name: Create ECS Task Definition
    runs-on: ubuntu-latest

    steps:
      # Step 1: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      # Step 2: Verify AWS credentials
      - name: Verify AWS credentials
        run: aws sts get-caller-identity --region ap-south-1

      # Step 3: Create ECS Task Definition
      - name: Create ECS Task Definition
        run: |
          aws ecs register-task-definition \
            --family static-html-task \
            --network-mode awsvpc \
            --execution-role-arn arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/ecsTaskExecutionRole \
            --container-definitions '[{
              "name": "apache-container",
              "image": "${{ steps.login-ecr.outputs.registry }}/static-html-apache:latest",
              "memory": 512,
              "portMappings": [{"containerPort": 80, "protocol": "tcp"}]
            }]' \
            --region ap-south-1

  create-service:
    name: Create ECS Service
    runs-on: ubuntu-latest

    steps:
      # Step 1: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      # Step 2: Verify AWS credentials
      - name: Verify AWS credentials
        run: aws sts get-caller-identity --region ap-south-1

      # Step 3: Create ECS Service
      - name: Create ECS Service
        run: |
          aws ecs create-service \
            --cluster apache-web-cluster \
            --service-name apache-web-service \
            --task-definition static-html-task \
            --desired-count 1 \
            --launch-type FARGATE \
            --network-configuration "awsvpcConfiguration={subnets=[subnet-xxxxxxxx],securityGroups=[sg-xxxxxxxx],assignPublicIp=ENABLED}" \
            --region ap-south-1

  build:
    name: Build, Push Docker Image to ECR, and Deploy to ECS
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Check out code
        uses: actions/checkout@v2

      # Step 2: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      # Step 3: Log in to Amazon ECR
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      # Step 4: Build, tag, and push the Docker image to Amazon ECR
      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: static-html-apache
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest

    steps:
      # Step 1: Configure AWS credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      # Step 2: Verify AWS credentials
      - name: Verify AWS credentials
        run: aws sts get-caller-identity --region ap-south-1

      # Step 3: Deploy to Amazon ECS
      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: config/ecs-task-definition-3.json
          service: apache-web-service
          cluster: apache-web-cluster
          wait-for-service-stability: true