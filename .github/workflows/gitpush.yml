name: Build, Push, and Deploy to ECS

on:
  push:
    branches:
      - main

jobs:
  build:
    name: Build, Push, and Deploy
    runs-on: ubuntu-latest

    steps:
      - name: Check out code
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ap-south-1

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: github-push-action
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Generate ECS Task Definition
        run: |
          cat <<EOF > ecs-task-definition.json
          {
            "family": "my-ecs-task",
            "containerDefinitions": [
              {
                "name": "my-container",
                "image": "${{ steps.login-ecr.outputs.registry }}/github-push-action:latest",
                "memory": 512,
                "cpu": 256,
                "essential": true,
                "portMappings": [
                  {
                    "containerPort": 80,
                    "hostPort": 80
                  }
                ]
              }
            ]
          }
          EOF

      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ecs-task-definition.json
          service: my-ecs-service         # Replace with your ECS service name
          cluster: my-ecs-cluster         # Replace with your ECS cluster name
          wait-for-service-stability: true

      - name: Retrieve ECS Service Public IP (for Fargate)
        run: |
          # Get the public IP of the ECS task if using Fargate
          TASK_ID=$(aws ecs list-tasks --cluster my-ecs-cluster --service-name my-ecs-service --query 'taskArns[0]' --output text)
          PUBLIC_IP=$(aws ecs describe-tasks --cluster my-ecs-cluster --tasks $TASK_ID --query 'tasks[0].attachments[0].details[?name==`privateIpAddress`].value' --output text)
          echo "Public IP of the ECS task: $PUBLIC_IP"
